# Введение в многозадачность в Python
# В современном программировании часто возникает необходимость выполнять
# несколько задач одновременно. Для этого используется многозадачность —
# способность компьютера или программы обрабатывать несколько задач
# одновременно.
# В Python существует несколько подходов к реализации многозадачности, каждый
# из которых имеет свои преимущества и недостатки. Прежде чем начать
# использовать многозадачность в своих программах, необходимо понимать
# основные понятия и подходы.
# Поток выполнения — это независимая последовательность инструкций, которая
# может выполняться параллельно с другими потоками. Каждый поток имеет свой
# стек вызовов и свой контекст выполнения.
# Процесс — это экземпляр программы, который запущен на компьютере. Каждый
# процесс имеет свой собственный адресное пространство, в котором хранятся
# данные и код программы. Процессы могут выполняться параллельно на разных
# ядрах процессора.
# Далее рассмотрим различные подходы к многозадачности в Python и их
# применение в различных ситуациях.
#
#
# Синхронный подход
# Синхронный код — это код, который выполняется последовательно, одна операция
# за другой. Когда программа выполняет какую-то операцию, она блокируется до тех
# пор, пока операция не будет завершена. Таким образом, если в программе есть
# долгие операции, они могут занимать много времени и приводить к задержкам в
# работе программы.
# Примеры синхронных операций в Python:
# ● чтение данных из файла
# ● отправка запроса на сервер и получение ответа
# ● выполнение сложных математических операций
# ● ожидание пользовательского ввода
# Ограничения синхронного кода:
# ● задержки в работе программы из-за долгих операций
# ● невозможность выполнения нескольких задач одновременно
# ● ограниченность производительности
# Для решения этих проблем можно использовать многопоточный или
# многопроцессорный подход. Однако, при использовании многопоточности и
# многопроцессорности возникают свои проблемы, такие как конкуренция за
# ресурсы и возможные блокировки.
#
# Примеры программа на Python
# Пример 1:
#
# import time
# def count_down(n):
#     for i in range(n, 0, -1):
#         print(i)
#         time.sleep(1)
#
# count_down(5)
#
# Эта программа выводит обратный отсчет от заданного числа до 1 с интервалом в 1
# секунду. В данном случае это синхронный код, так как каждое выполнение цикла
# for блокирует выполнение программы на 1 секунду.
#
#
# Пример 2:
#
# import time
#
# def slow_function():
#     print("Начало функции")
#     time.sleep(5)
#     print("Конец функции")
#
# print("Начало программы")
# slow_function()
# print("Конец программы")
#
# Эта программа вызывает функцию slow_function(), которая занимает 5 секунд на
# выполнение. Весь код работает синхронно, то есть выполнение программы
# блокируется на время выполнения функции.
#
# Пример 3:
# import random
# import time
#
#
# def long_running_task():
#     for i in range(5):
#         print(f"Выполнение задачи {i}")
#         time.sleep(random.randint(1, 3))
#
# def main():
#     print("Начало программы")
#     long_running_task()
#     print("Конец программы")
#
# main()
#
# Эта программа запускает длительную задачу long_running_task(), которая
# выполняется в течение случайного времени от 1 до 3 секунд. Весь код работает
# синхронно, поэтому выполнение программы блокируется на время выполнения
# задачи.
# В целом, синхронный код может быть полезен для простых задач, но он может стать
# проблемой при работе с длительными операциями или задачами, требующими
# большого количества вычислений. В таких случаях лучше использовать
# многопоточный или асинхронный код.
